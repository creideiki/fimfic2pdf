#!/usr/bin/env ruby
# frozen_string_literal: true

require 'logger'
require 'optparse'

require 'fimfic2pdf'

logger = Logger.new($stderr, progname: 'Driver')

parser = OptionParser.new
options = { toc: true }

parser.banner = 'Usage: fimfic2pdf -i ID[,ID...] [options]

Saves files in a working directory named ./<ID>/.

If multiple IDs specified, writes an anthology in the current working
directory consisting of the identified stories.

When run multiple times:

* By default, only re-renders the PDF, including any manual changes
  made to the generated LaTeX code.
* To re-parse the HTML and re-transform to LaTeX, losing any manual
  changes, use the "-t/--retransform" flag.
* To re-download the EPUB file and start over, remove the ./<ID>/
  directory.

To change any formatting options, "-t/--retransform" must be
specified, which loses any manual changes.

By default, produces a single PDF with all chapters. For splitting
into mutiple volumes, give the range of chapters for each volume,
e.g.:
   --volumes 1-10,11-20
yields two volumes, containing chapters 1-10 and 11-20, respectively.
Each chapter must be used in exactly one volume.

Section breaks (represented as a horizontal line in EPUB and lines
with asterisks on the web) have a few different renderings. To choose
a style, use:
   --hr-style [asterism,fleuron,scrollwork]
where "asterism" is the default.

Asterism is three asterisks in a triangle.

Fleuron (centered, roughly square symbol) and scrollwork (horizontally
extended line with flourishes) take a number specifying which symbol
to use. See the "pgfornament" documentation at
https://ctan.org/pkg/pgfornament for the complete list. 80-89 are
recommended for scrollwork and the rest for fleurons. The default is a
horse for fleurons (symbol 108) and a line with a center embellishment
for scrollwork (symbol 82).

Underlined text cannot be automatically broken into lines. A list of
chapters containing underlined text will be printed, so it can be
checked manually for overruns. To break a line of underlined text, end
and then restart the \fancyuline{} environment. E.g. change:
   \fancyuline{This is a long line that should be broken.}
into
   \fancyuline{This is a long line} \fancyuline{that should be broken.}
Then re-run the program (without specifying "-t/--retransform") to
re-render the changed LaTeX code.

If the source text contains Unicode open/close quotation marks, they
will be redered correctly by default. If it only contains ASCII
straight quotation marks, they will all be rendered as closing
quotation marks by default. To attempt to automatically change ASCII
quotation marks to Unicode ones, use the "-q/--prettify-quotes"
option. This will blindly change every straight double quote to an
alternating open or close one, which will fail silently if quotes are
not strictly balanced. It also will not handle single quotes, since
those are indistinguishable from apostrophes.
'
parser.separator ''

# rubocop:disable Layout/LineLength
parser.separator 'Main options'
parser.separator ''
parser.on('-i ID,ID,...', '--id ID,ID,...', 'story ID(s)', Array) { |ids| options[:ids] = ids }
parser.on('-t', '--retransform', 're-parse the HTML and re-transform to LaTeX, losing manual changes') { |f| options[:force_retransform] = f }

parser.separator ''
parser.on('-V', '--version', 'display version information') do
  puts "FimFic2PDF #{FimFic2PDF::VERSION}"
  exit 0
end
parser.on('-h', '--help', 'display usage information') { abort parser.to_s }

parser.separator ''
parser.separator 'Formatting options'
parser.separator 'Changing these have no effect unless also specifying "-t/--retransform", losing manual changes'
parser.separator ''

parser.on('-c', '--no-chapter', 'disable "Chapter X" in chapter titles') { options[:chapter_style] = :no_chapter }
parser.on('-o', '--no-toc', 'disable table of contents') { options[:toc] = false }
parser.on('-q', '--prettify-quotes', 'change ASCII quotation marks to Unicode ones') { options[:prettify_quotes] = true }
parser.on('-s', '--hr-style STYLE', [:asterism, :fleuron, :scrollwork], 'style of <hr> section breaks: asterism (default), fleuron, or scrollwork') { |s| options[:hr_style] = s }
parser.on('-v CHAPTERS,CHAPTERS', '--volumes START1-END1,...', 'split story into multiple volumes', Array) { |volumes| options[:volumes] = volumes }
parser.on('-y', '--hr-symbol SYMBOL', Integer, 'symbol number for scrollwork or fleuron') { |y| options[:hr_symbol] = y }
# rubocop:enable Layout/LineLength


begin
  parser.parse! ARGV
rescue OptionParser::ParseError => e
  if e.args.empty?
    abort parser.to_s
  else
    abort "#{e}\n\n#{parser}"
  end
end

unless options.include? :ids
  puts 'No story ID(s) specified.'
  puts ''
  abort parser.to_s
end

options[:hr_style] = :asterism unless options.include? :hr_style
unless options.include? :hr_symbol
  options[:hr_symbol] = 82  if options[:hr_style] == :scrollwork
  options[:hr_symbol] = 108 if options[:hr_style] == :fleuron
end

options[:ids].each do |id|
  if File.directory? id.to_s
    logger.info "Working directory #{id} already exists, not downloading EPUB"
  else
    downloader = FimFic2PDF::Downloader.new id
    downloader.fetch
    downloader.unpack
    downloader.write_config
    options[:transform] = true
  end
end

warnings = {}

options[:ids].each do |id|
  options[:id] = id

  if options[:force_retransform] or options[:transform]
    logger.info 'Forcing reparse and retransform from HTML to LaTeX due to "-t" flag' if options[:force_retransform]
    transformer = FimFic2PDF::Transformer.new(options)
    transformer.validate_volumes
    transformer.parse_metadata
    warnings = transformer.transform
    transformer.write_story
    transformer.write_config
  else
    logger.info 'Not transforming, using existing LaTeX code'
  end
end

if options[:ids].size > 1
  logger.debug 'Writing anthology top level document'
  anthology = FimFic2PDF::Anthology.new options
  anthology.write_anthology
  anthology.write_config
end

if options[:ids].size > 1
  logger.debug 'Rendering anthology'
  renderer = FimFic2PDF::Anthology_Renderer.new
  renderer.render_anthology
else
  logger.debug 'Rendering single story'
  renderer = FimFic2PDF::Renderer.new options[:id]
  renderer.render_story
end

warnings.each do |_type, warn|
  unless warn[:chapters].empty?
    logger.warn warn[:message]
    warn[:chapters].each { |c| logger.warn c }
  end
end
