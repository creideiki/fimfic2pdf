#!/usr/bin/env ruby
# frozen_string_literal: true

require 'logger'
require 'optparse'

require 'fimfic2pdf/downloader'
require 'fimfic2pdf/renderer'
require 'fimfic2pdf/transformer'
require 'fimfic2pdf/version'

logger = Logger.new($stderr, progname: 'Driver')

parser = OptionParser.new
options = {}

parser.banner = 'Usage: fimfic2pdf -i ID [options]

Saves files in a working directory named ./<ID>/.

When run multiple times:
* By default, only re-renders the PDF, including any manual changes to the LaTeX code.
* To re-parse the HTML and re-transform to LaTeX, losing any manual changes, use the "-t" flag.
* To re-download the EPUB file and start over, remove the ./<ID>/ directory.
'
parser.separator ''

# rubocop:disable Layout/LineLength
parser.on('-i ID', '--id ID', 'story ID', Integer) { |id| options[:id] = id }
parser.on('-t', '--retransform', 'force re-parsing of the HTML and transforming to LaTeX') { |f| options[:force_retransform] = f }
# rubocop:enable Layout/LineLength

parser.on_tail
parser.on_tail('-V', '--version', 'display version information') do
  puts "FimFic2PDF #{FimFic2PDF::VERSION}"
  exit 0
end
parser.on_tail('-h', '--help', 'display usage information') { abort parser.to_s }

begin
  parser.parse! ARGV
rescue OptionParser::ParseError => e
  if e.args.empty?
    abort parser.to_s
  else
    abort "#{e}\n\n#{parser}"
  end
end

unless options.include? :id
  puts 'No story ID specified.'
  puts ''
  abort parser.to_s
end

if File.directory? options[:id].to_s
  logger.info "Working directory #{options[:id]} already exists, not downloading EPUB"
else
  downloader = FimFic2PDF::Downloader.new options[:id]
  downloader.fetch
  downloader.unpack
  downloader.write_config
  options[:transform] = true
end

if options[:force_retransform] or options[:transform]
  logger.info 'Forcing reparse and retransform from HTML to LaTeX due to "-t" flag' if options[:force_retransform]
  transformer = FimFic2PDF::Transformer.new options[:id]
  transformer.parse_metadata
  transformer.transform
  transformer.write_book
  transformer.write_config
else
  logger.info 'Not transforming, using existing LaTeX code'
end

renderer = FimFic2PDF::Renderer.new options[:id]
renderer.render
